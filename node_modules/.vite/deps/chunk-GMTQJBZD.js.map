{
  "version": 3,
  "sources": ["../../ol/structs/RBush.js", "../../ol/source/VectorEventType.js", "../../ol/loadingstrategy.js", "../../ol/featureloader.js", "../../ol/source/Vector.js"],
  "sourcesContent": ["/**\r\n * @module ol/structs/RBush\r\n */\r\nimport RBush_ from 'rbush';\r\nimport {createOrUpdate, equals} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @typedef {import(\"rbush\").BBox & {value: T}} Entry\r\n * @template T\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template {Object} T\r\n */\r\nclass RBush {\r\n  /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */\r\n  constructor(maxEntries) {\r\n    /**\r\n     * @private\r\n     * @type {RBush_<Entry<T>>}\r\n     */\r\n    this.rbush_ = new RBush_(maxEntries);\r\n\r\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry<T>>}\r\n     */\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  insert(extent, value) {\r\n    /** @type {Entry<T>} */\r\n    const item = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n      value: value,\r\n    };\r\n\r\n    this.rbush_.insert(item);\r\n    this.items_[getUid(value)] = item;\r\n  }\r\n\r\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\r\n  load(extents, values) {\r\n    const items = new Array(values.length);\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      const extent = extents[i];\r\n      const value = values[i];\r\n\r\n      /** @type {Entry<T>} */\r\n      const item = {\r\n        minX: extent[0],\r\n        minY: extent[1],\r\n        maxX: extent[2],\r\n        maxY: extent[3],\r\n        value: value,\r\n      };\r\n      items[i] = item;\r\n      this.items_[getUid(value)] = item;\r\n    }\r\n    this.rbush_.load(items);\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\r\n  remove(value) {\r\n    const uid = getUid(value);\r\n\r\n    // get the object in which the value was wrapped when adding to the\r\n    // internal rbush. then use that object to do the removal.\r\n    const item = this.items_[uid];\r\n    delete this.items_[uid];\r\n    return this.rbush_.remove(item) !== null;\r\n  }\r\n\r\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  update(extent, value) {\r\n    const item = this.items_[getUid(value)];\r\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\r\n    if (!equals(bbox, extent)) {\r\n      this.remove(value);\r\n      this.insert(extent, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\r\n  getAll() {\r\n    const items = this.rbush_.all();\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\r\n  getInExtent(extent) {\r\n    /** @type {import(\"rbush\").BBox} */\r\n    const bbox = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n    };\r\n    const items = this.rbush_.search(bbox);\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach(callback) {\r\n    return this.forEach_(this.getAll(), callback);\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEachInExtent(extent, callback) {\r\n    return this.forEach_(this.getInExtent(extent), callback);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): *} callback Callback.\r\n   * @private\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach_(values, callback) {\r\n    let result;\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      result = callback(values[i]);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.items_);\r\n  }\r\n\r\n  /**\r\n   * Remove all values from the RBush.\r\n   */\r\n  clear() {\r\n    this.rbush_.clear();\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\r\n  getExtent(extent) {\r\n    const data = this.rbush_.toJSON();\r\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\r\n  }\r\n\r\n  /**\r\n   * @param {RBush<T>} rbush R-Tree.\r\n   */\r\n  concat(rbush) {\r\n    this.rbush_.load(rbush.rbush_.all());\r\n    for (const i in rbush.items_) {\r\n      this.items_[i] = rbush.items_[i];\r\n    }\r\n  }\r\n}\r\n\r\nexport default RBush;\r\n", "/**\r\n * @module ol/source/VectorEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a feature is added to the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\r\n   * @api\r\n   */\r\n  ADDFEATURE: 'addfeature',\r\n\r\n  /**\r\n   * Triggered when a feature is updated.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\r\n   * @api\r\n   */\r\n  CHANGEFEATURE: 'changefeature',\r\n\r\n  /**\r\n   * Triggered when the clear method is called on the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\r\n   * @api\r\n   */\r\n  CLEAR: 'clear',\r\n\r\n  /**\r\n   * Triggered when a feature is removed from the source.\r\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\r\n   * @api\r\n   */\r\n  REMOVEFEATURE: 'removefeature',\r\n\r\n  /**\r\n   * Triggered when features starts loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\r\n   * @api\r\n   */\r\n  FEATURESLOADSTART: 'featuresloadstart',\r\n\r\n  /**\r\n   * Triggered when features finishes loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\r\n   * @api\r\n   */\r\n  FEATURESLOADEND: 'featuresloadend',\r\n\r\n  /**\r\n   * Triggered if feature loading results in an error.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\r\n   * @api\r\n   */\r\n  FEATURESLOADERROR: 'featuresloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\r\n */\r\n", "/**\r\n * @module ol/loadingstrategy\r\n */\r\n\r\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\r\n\r\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function all(extent, resolution) {\r\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\r\n}\r\n\r\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function bbox(extent, resolution) {\r\n  return [extent];\r\n}\r\n\r\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\r\nexport function tile(tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      const z = tileGrid.getZForResolution(\r\n        fromUserResolution(resolution, projection),\r\n      );\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        fromUserExtent(extent, projection),\r\n        z,\r\n      );\r\n      /** @type {Array<import(\"./extent.js\").Extent>} */\r\n      const extents = [];\r\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\r\n      const tileCoord = [z, 0, 0];\r\n      for (\r\n        tileCoord[1] = tileRange.minX;\r\n        tileCoord[1] <= tileRange.maxX;\r\n        ++tileCoord[1]\r\n      ) {\r\n        for (\r\n          tileCoord[2] = tileRange.minY;\r\n          tileCoord[2] <= tileRange.maxY;\r\n          ++tileCoord[2]\r\n        ) {\r\n          extents.push(\r\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection),\r\n          );\r\n        }\r\n      }\r\n      return extents;\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/featureloader\r\n */\r\nimport {VOID} from './functions.js';\r\n\r\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\r\nlet withCredentials = false;\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), a\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n *\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @typedef {function(this:(import(\"./source/Vector\").default<FeatureType>|import(\"./VectorTile.js\").default),\r\n *           import(\"./extent.js\").Extent,\r\n *           number,\r\n *           import(\"./proj/Projection.js\").default,\r\n *           function(Array<FeatureType>): void=,\r\n *           function(): void=): void} FeatureLoader\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<FeatureType>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\r\nexport function loadFeaturesXhr(\r\n  url,\r\n  format,\r\n  extent,\r\n  resolution,\r\n  projection,\r\n  success,\r\n  failure,\r\n) {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\r\n    'GET',\r\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n    true,\r\n  );\r\n  if (format.getType() == 'arraybuffer') {\r\n    xhr.responseType = 'arraybuffer';\r\n  }\r\n  xhr.withCredentials = withCredentials;\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  xhr.onload = function (event) {\r\n    // status will be 0 for file:// urls\r\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n      const type = format.getType();\r\n      try {\r\n        /** @type {Document|Node|Object|string|undefined} */\r\n        let source;\r\n        if (type == 'text' || type == 'json') {\r\n          source = xhr.responseText;\r\n        } else if (type == 'xml') {\r\n          source = xhr.responseXML || xhr.responseText;\r\n        } else if (type == 'arraybuffer') {\r\n          source = /** @type {ArrayBuffer} */ (xhr.response);\r\n        }\r\n        if (source) {\r\n          success(\r\n            /** @type {Array<FeatureType>} */\r\n            (\r\n              format.readFeatures(source, {\r\n                extent: extent,\r\n                featureProjection: projection,\r\n              })\r\n            ),\r\n            format.readProjection(source),\r\n          );\r\n        } else {\r\n          failure();\r\n        }\r\n      } catch {\r\n        failure();\r\n      }\r\n    } else {\r\n      failure();\r\n    }\r\n  };\r\n  /**\r\n   * @private\r\n   */\r\n  xhr.onerror = failure;\r\n  xhr.send();\r\n}\r\n\r\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n * @template {import(\"./Feature.js\").FeatureLike} FeatureType\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\r\n * @return {FeatureLoader<FeatureType>} The feature loader.\r\n * @api\r\n */\r\nexport function xhr(url, format) {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<FeatureType>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   */\r\n  return function (extent, resolution, projection, success, failure) {\r\n    const source =\r\n      /** @type {import(\"./source/Vector\").default<FeatureType>} */ (this);\r\n    loadFeaturesXhr(\r\n      url,\r\n      format,\r\n      extent,\r\n      resolution,\r\n      projection,\r\n      /**\r\n       * @param {Array<FeatureType>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */\r\n      function (features, dataProjection) {\r\n        source.addFeatures(features);\r\n        if (success !== undefined) {\r\n          success(features);\r\n        }\r\n      },\r\n      /* FIXME handle error */ failure ? failure : VOID,\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\r\nexport function setWithCredentials(xhrWithCredentials) {\r\n  withCredentials = xhrWithCredentials;\r\n}\r\n", "/**\r\n * @module ol/source/Vector\r\n */\r\n\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport RBush from '../structs/RBush.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport Source from './Source.js';\r\nimport VectorEventType from './VectorEventType.js';\r\nimport {TRUE, VOID} from '../functions.js';\r\nimport {all as allStrategy} from '../loadingstrategy.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\r\nimport {extend} from '../array.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {xhr} from '../featureloader.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\r\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\r\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\r\n *\r\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\r\n * type.\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n */\r\nexport class VectorSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {FeatureType} [feature] Feature.\r\n   * @param {Array<FeatureType>} [features] Features.\r\n   */\r\n  constructor(type, feature, features) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\r\n     * @type {FeatureType|undefined}\r\n     * @api\r\n     */\r\n    this.feature = feature;\r\n\r\n    /**\r\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\r\n     * @type {Array<FeatureType>|undefined}\r\n     * @api\r\n     */\r\n    this.features = features;\r\n  }\r\n}\r\n\r\n/***\r\n * @template {import(\"../Feature.js\").FeatureLike} [T=import(\"../Feature.js\").default]\r\n * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\r\n */\r\n\r\n/**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {Array<FeatureType>|Collection<FeatureType>} [features]\r\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\r\n * and the collection will stay in sync.\r\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] The feature format used by the XHR\r\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\r\n * @property {import(\"../featureloader.js\").FeatureLoader<FeatureType>} [loader]\r\n * The loader function used to load features, from a remote source for example.\r\n * If this is not set and `url` is set, the source will create and use an XHR\r\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\r\n * will only fire if the `success` and `failure` callbacks are used.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * import Vector from 'ol/source/Vector.js';\r\n * import GeoJSON from 'ol/format/GeoJSON.js';\r\n * import {bbox} from 'ol/loadingstrategy.js';\r\n *\r\n * const vectorSource = new Vector({\r\n *   format: new GeoJSON(),\r\n *   loader: function(extent, resolution, projection, success, failure) {\r\n *      const proj = projection.getCode();\r\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n *          'outputFormat=application/json&srsname=' + proj + '&' +\r\n *          'bbox=' + extent.join(',') + ',' + proj;\r\n *      const xhr = new XMLHttpRequest();\r\n *      xhr.open('GET', url);\r\n *      const onError = function() {\r\n *        vectorSource.removeLoadedExtent(extent);\r\n *        failure();\r\n *      }\r\n *      xhr.onerror = onError;\r\n *      xhr.onload = function() {\r\n *        if (xhr.status == 200) {\r\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\r\n *          vectorSource.addFeatures(features);\r\n *          success(features);\r\n *        } else {\r\n *          onError();\r\n *        }\r\n *      }\r\n *      xhr.send();\r\n *    },\r\n *    strategy: bbox,\r\n *  });\r\n * ```\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\r\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\r\n * By default an {@link module:ol/loadingstrategy.all}\r\n * strategy is used, a one-off strategy which loads all features at once.\r\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\r\n * Setting this option instructs the source to load features using an XHR loader\r\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\r\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\r\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\r\n * other loading strategies.\r\n * Requires `format` to be set as well.\r\n * When default XHR feature loader is provided, the features will\r\n * be transformed from the data projection to the view projection\r\n * during parsing. If your remote data source does not advertise its projection\r\n * properly, this transformation will be incorrect. For some formats, the\r\n * default projection (usually EPSG:4326) can be overridden by setting the\r\n * dataProjection constructor option on the format.\r\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\r\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\r\n * @property {boolean} [useSpatialIndex=true]\r\n * By default, an RTree is used as spatial index. When features are removed and\r\n * added frequently, and the total number of features is low, setting this to\r\n * `false` may improve performance.\r\n *\r\n * Note that\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\r\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\r\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\r\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\r\n * through all features.\r\n *\r\n * When set to `false`, the features will be maintained in an\r\n * {@link module:ol/Collection~Collection}, which can be retrieved through\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\r\n * -180° and 180° meridians to work properly, this should be set to `false`. The\r\n * resulting geometry coordinates will then exceed the world bounds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Provides a source of features for vector layers. Vector features provided\r\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\r\n * vector data that is optimized for rendering.\r\n *\r\n * @fires VectorSourceEvent\r\n * @api\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n */\r\nclass VectorSource extends Source {\r\n  /**\r\n   * @param {Options<FeatureType>} [options] Vector source options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: true,\r\n      projection: undefined,\r\n      state: 'ready',\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n    });\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../featureloader.js\").FeatureLoader<FeatureType>}\r\n     */\r\n    this.loader_ = VOID;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\r\n     */\r\n    this.format_ = options.format || null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    if (options.loader !== undefined) {\r\n      this.loader_ = options.loader;\r\n    } else if (this.url_ !== undefined) {\r\n      assert(this.format_, '`format` must be set when `url` is set');\r\n      // create a XHR feature loader for \"url\" and \"format\"\r\n      this.loader_ = xhr(this.url_, this.format_);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {LoadingStrategy}\r\n     */\r\n    this.strategy_ =\r\n      options.strategy !== undefined ? options.strategy : allStrategy;\r\n\r\n    const useSpatialIndex =\r\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<FeatureType>}\r\n     */\r\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\r\n     */\r\n    this.loadedExtentsRtree_ = new RBush();\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.loadingExtentsCount_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    /**\r\n     * A lookup of features by id (the return from feature.getId()).\r\n     * @private\r\n     * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}\r\n     */\r\n    this.idIndex_ = {};\r\n\r\n    /**\r\n     * A lookup of features by uid (using getUid(feature)).\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */\r\n    this.uidIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.featureChangeKeys_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Collection<FeatureType>|null}\r\n     */\r\n    this.featuresCollection_ = null;\r\n\r\n    /** @type {Collection<FeatureType>} */\r\n    let collection;\r\n    /** @type {Array<FeatureType>} */\r\n    let features;\r\n    if (Array.isArray(options.features)) {\r\n      features = options.features;\r\n    } else if (options.features) {\r\n      collection = options.features;\r\n      features = collection.getArray();\r\n    }\r\n    if (!useSpatialIndex && collection === undefined) {\r\n      collection = new Collection(features);\r\n    }\r\n    if (features !== undefined) {\r\n      this.addFeaturesInternal(features);\r\n    }\r\n    if (collection !== undefined) {\r\n      this.bindFeaturesCollection_(collection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single feature to the source.  If you want to add a batch of features\r\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\r\n   * instead. A feature will not be added to the source if feature with\r\n   * the same id is already there. The reason for this behavior is to avoid\r\n   * feature duplication when using bbox or tile loading strategies.\r\n   * Note: this also applies if a {@link module:ol/Collection~Collection} is used for features,\r\n   * meaning that if a feature with a duplicate id is added in the collection, it will\r\n   * be removed from it right away.\r\n   * @param {FeatureType} feature Feature to add.\r\n   * @api\r\n   */\r\n  addFeature(feature) {\r\n    this.addFeatureInternal(feature);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add a feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @protected\r\n   */\r\n  addFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n\r\n    if (!this.addToIndex_(featureKey, feature)) {\r\n      if (this.featuresCollection_) {\r\n        this.featuresCollection_.remove(feature);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setupChangeEvents_(featureKey, feature);\r\n\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      const extent = geometry.getExtent();\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.insert(extent, feature);\r\n      }\r\n    } else {\r\n      this.nullGeometryFeatures_[featureKey] = feature;\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */\r\n  setupChangeEvents_(featureKey, feature) {\r\n    if (feature instanceof RenderFeature) {\r\n      return;\r\n    }\r\n    this.featureChangeKeys_[featureKey] = [\r\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\r\n      listen(\r\n        feature,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleFeatureChange_,\r\n        this,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\r\n   *     candidate for insertion into the Rtree.\r\n   * @private\r\n   */\r\n  addToIndex_(featureKey, feature) {\r\n    let valid = true;\r\n    if (feature.getId() !== undefined) {\r\n      const id = String(feature.getId());\r\n      if (!(id in this.idIndex_)) {\r\n        this.idIndex_[id] = feature;\r\n      } else if (feature instanceof RenderFeature) {\r\n        const indexedFeature = this.idIndex_[id];\r\n        if (!(indexedFeature instanceof RenderFeature)) {\r\n          valid = false;\r\n        } else {\r\n          if (!Array.isArray(indexedFeature)) {\r\n            this.idIndex_[id] = [indexedFeature, feature];\r\n          } else {\r\n            indexedFeature.push(feature);\r\n          }\r\n        }\r\n      } else {\r\n        valid = false;\r\n      }\r\n    }\r\n    if (valid) {\r\n      assert(\r\n        !(featureKey in this.uidIndex_),\r\n        'The passed `feature` was already added to the source',\r\n      );\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    return valid;\r\n  }\r\n\r\n  /**\r\n   * Add a batch of features to the source.\r\n   * @param {Array<FeatureType>} features Features to add.\r\n   * @api\r\n   */\r\n  addFeatures(features) {\r\n    this.addFeaturesInternal(features);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add features without firing a `change` event.\r\n   * @param {Array<FeatureType>} features Features.\r\n   * @protected\r\n   */\r\n  addFeaturesInternal(features) {\r\n    const extents = [];\r\n    /** @type {Array<FeatureType>} */\r\n    const newFeatures = [];\r\n    /** @type {Array<FeatureType>} */\r\n    const geometryFeatures = [];\r\n\r\n    for (let i = 0, length = features.length; i < length; i++) {\r\n      const feature = features[i];\r\n      const featureKey = getUid(feature);\r\n      if (this.addToIndex_(featureKey, feature)) {\r\n        newFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n      const feature = newFeatures[i];\r\n      const featureKey = getUid(feature);\r\n      this.setupChangeEvents_(featureKey, feature);\r\n\r\n      const geometry = feature.getGeometry();\r\n      if (geometry) {\r\n        const extent = geometry.getExtent();\r\n        extents.push(extent);\r\n        geometryFeatures.push(feature);\r\n      } else {\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    }\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.load(extents, geometryFeatures);\r\n    }\r\n\r\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\r\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Collection<FeatureType>} collection Collection.\r\n   * @private\r\n   */\r\n  bindFeaturesCollection_(collection) {\r\n    let modifyingCollection = false;\r\n    this.addEventListener(\r\n      VectorEventType.ADDFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.push(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    this.addEventListener(\r\n      VectorEventType.REMOVEFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.remove(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.addFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.removeFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    this.featuresCollection_ = collection;\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\r\n   * @api\r\n   */\r\n  clear(fast) {\r\n    if (fast) {\r\n      for (const featureId in this.featureChangeKeys_) {\r\n        const keys = this.featureChangeKeys_[featureId];\r\n        keys.forEach(unlistenByKey);\r\n      }\r\n      if (!this.featuresCollection_) {\r\n        this.featureChangeKeys_ = {};\r\n        this.idIndex_ = {};\r\n        this.uidIndex_ = {};\r\n      }\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        const removeAndIgnoreReturn = (feature) => {\r\n          this.removeFeatureInternal(feature);\r\n        };\r\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\r\n        for (const id in this.nullGeometryFeatures_) {\r\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\r\n        }\r\n      }\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.clear();\r\n    }\r\n\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.clear();\r\n    }\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\r\n    this.dispatchEvent(clearEvent);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features on the source, calling the provided callback\r\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\r\n   * stop and the function will return the same value.\r\n   * Note: this function only iterate through the feature that have a defined geometry.\r\n   *\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     on the source.  Return a truthy value to stop iteration.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeature(callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEach(callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometries contain the provided\r\n   * coordinate, calling the callback with each feature.  If the callback returns\r\n   * a \"truthy\" value, iteration will stop and the function will return the same\r\n   * value.\r\n   *\r\n   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be\r\n   * called for all features.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose goemetry contains the provided coordinate.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\r\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\r\n    return this.forEachFeatureInExtent(extent, function (feature) {\r\n      const geometry = feature.getGeometry();\r\n      if (\r\n        geometry instanceof RenderFeature ||\r\n        geometry.intersectsCoordinate(coordinate)\r\n      ) {\r\n        return callback(feature);\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose bounding box intersects the provided\r\n   * extent (note that the feature's geometry may not intersect the extent),\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you are interested in features whose geometry intersects an extent, call\r\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will loop through all\r\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose bounding box intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureInExtent(extent, callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEachInExtent(extent, callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometry intersects the provided extent,\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you only want to test for bounding box intersection, call the\r\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose geometry intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureIntersectingExtent(extent, callback) {\r\n    return this.forEachFeatureInExtent(\r\n      extent,\r\n      /**\r\n       * @param {FeatureType} feature Feature.\r\n       * @return {T|undefined} The return value from the last call to the callback.\r\n       */\r\n      function (feature) {\r\n        const geometry = feature.getGeometry();\r\n        if (\r\n          geometry instanceof RenderFeature ||\r\n          geometry.intersectsExtent(extent)\r\n        ) {\r\n          const result = callback(feature);\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the features collection associated with this source. Will be `null`\r\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\r\n   * with a {@link module:ol/Collection~Collection} as `features`.\r\n   * @return {Collection<FeatureType>|null} The collection of features.\r\n   * @api\r\n   */\r\n  getFeaturesCollection() {\r\n    return this.featuresCollection_;\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot of the features currently on the source in random order. The returned array\r\n   * is a copy, the features are references to the features in the source.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    let features;\r\n    if (this.featuresCollection_) {\r\n      features = this.featuresCollection_.getArray().slice(0);\r\n    } else if (this.featuresRtree_) {\r\n      features = this.featuresRtree_.getAll();\r\n      if (!isEmpty(this.nullGeometryFeatures_)) {\r\n        extend(features, Object.values(this.nullGeometryFeatures_));\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose geometry intersects the provided coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesAtCoordinate(coordinate) {\r\n    const features = [];\r\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\r\n      features.push(feature);\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\r\n   * all features intersecting the given extent in random order (so it may include\r\n   * features whose geometries do not intersect the extent).\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will return all\r\n   * features.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\r\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent, projection) {\r\n    if (this.featuresRtree_) {\r\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\r\n\r\n      if (!multiWorld) {\r\n        return this.featuresRtree_.getInExtent(extent);\r\n      }\r\n\r\n      const extents = wrapAndSliceX(extent, projection);\r\n\r\n      return [].concat(\r\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent)),\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getArray().slice(0);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get the closest feature to the provided coordinate.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false` and the features in this source are of type\r\n   * {@link module:ol/Feature~Feature}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType):boolean} [filter] Feature filter function.\r\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\r\n   *     and it should return a boolean value. By default, no filtering is made.\r\n   * @return {FeatureType} Closest feature.\r\n   * @api\r\n   */\r\n  getClosestFeatureToCoordinate(coordinate, filter) {\r\n    // Find the closest feature using branch and bound.  We start searching an\r\n    // infinite extent, and find the distance from the first feature found.  This\r\n    // becomes the closest feature.  We then compute a smaller extent which any\r\n    // closer feature must intersect.  We continue searching with this smaller\r\n    // extent, trying to find a closer feature.  Every time we find a closer\r\n    // feature, we update the extent being searched so that any even closer\r\n    // feature must intersect it.  We continue until we run out of features.\r\n    const x = coordinate[0];\r\n    const y = coordinate[1];\r\n    let closestFeature = null;\r\n    const closestPoint = [NaN, NaN];\r\n    let minSquaredDistance = Infinity;\r\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\r\n    filter = filter ? filter : TRUE;\r\n    this.featuresRtree_.forEachInExtent(\r\n      extent,\r\n      /**\r\n       * @param {FeatureType} feature Feature.\r\n       */\r\n      function (feature) {\r\n        if (filter(feature)) {\r\n          const geometry = feature.getGeometry();\r\n          const previousMinSquaredDistance = minSquaredDistance;\r\n          minSquaredDistance =\r\n            geometry instanceof RenderFeature\r\n              ? 0\r\n              : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\r\n          if (minSquaredDistance < previousMinSquaredDistance) {\r\n            closestFeature = feature;\r\n            // This is sneaky.  Reduce the extent that it is currently being\r\n            // searched while the R-Tree traversal using this same extent object\r\n            // is still in progress.  This is safe because the new extent is\r\n            // strictly contained by the old extent.\r\n            const minDistance = Math.sqrt(minSquaredDistance);\r\n            extent[0] = x - minDistance;\r\n            extent[1] = y - minDistance;\r\n            extent[2] = x + minDistance;\r\n            extent[3] = y + minDistance;\r\n          }\r\n        }\r\n      },\r\n    );\r\n    return closestFeature;\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the features currently in the source.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\r\n   *     will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    return this.featuresRtree_.getExtent(extent);\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s\r\n   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling\r\n   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per\r\n   * `GeometryCollection` member.\r\n   * Note that the index treats string and numeric identifiers as the same.  So\r\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\r\n   *\r\n   * @param {string|number} id Feature identifier.\r\n   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).\r\n   * @api\r\n   */\r\n  getFeatureById(id) {\r\n    const feature = this.idIndex_[id.toString()];\r\n    return feature !== undefined\r\n      ? /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */ (\r\n          feature\r\n        )\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its internal unique identifier (using `getUid`).\r\n   *\r\n   * @param {string} uid Feature identifier.\r\n   * @return {FeatureType|null} The feature (or `null` if not found).\r\n   */\r\n  getFeatureByUid(uid) {\r\n    const feature = this.uidIndex_[uid];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get the format associated with this source.\r\n   *\r\n   * @return {import(\"../format/Feature.js\").default<FeatureType>|null}} The feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */\r\n  getOverlaps() {\r\n    return this.overlaps_;\r\n  }\r\n\r\n  /**\r\n   * Get the url associated with this source.\r\n   *\r\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleFeatureChange_(event) {\r\n    const feature = /** @type {FeatureType} */ (event.target);\r\n    const featureKey = getUid(feature);\r\n    const geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      if (!(featureKey in this.nullGeometryFeatures_)) {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.remove(feature);\r\n        }\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    } else {\r\n      const extent = geometry.getExtent();\r\n      if (featureKey in this.nullGeometryFeatures_) {\r\n        delete this.nullGeometryFeatures_[featureKey];\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.insert(extent, feature);\r\n        }\r\n      } else {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.update(extent, feature);\r\n        }\r\n      }\r\n    }\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const sid = id.toString();\r\n      if (this.idIndex_[sid] !== feature) {\r\n        this.removeFromIdIndex_(feature);\r\n        this.idIndex_[sid] = feature;\r\n      }\r\n    } else {\r\n      this.removeFromIdIndex_(feature);\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    this.changed();\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if the feature is contained within the source.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} Has feature.\r\n   * @api\r\n   */\r\n  hasFeature(feature) {\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      return id in this.idIndex_;\r\n    }\r\n    return getUid(feature) in this.uidIndex_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    if (this.featuresRtree_) {\r\n      return (\r\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getLength() === 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\r\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\r\n      const extentToLoad = extentsToLoad[i];\r\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\r\n        extentToLoad,\r\n        /**\r\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\r\n         * @return {boolean} Contains.\r\n         */\r\n        function (object) {\r\n          return containsExtent(object.extent, extentToLoad);\r\n        },\r\n      );\r\n      if (!alreadyLoaded) {\r\n        ++this.loadingExtentsCount_;\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART),\r\n        );\r\n        this.loader_.call(\r\n          this,\r\n          extentToLoad,\r\n          resolution,\r\n          projection,\r\n          (features) => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(\r\n                VectorEventType.FEATURESLOADEND,\r\n                undefined,\r\n                features,\r\n              ),\r\n            );\r\n          },\r\n          () => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR),\r\n            );\r\n          },\r\n        );\r\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\r\n      }\r\n    }\r\n    this.loading =\r\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  refresh() {\r\n    this.clear(true);\r\n    this.loadedExtentsRtree_.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Remove an extent from the list of loaded extents.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  removeLoadedExtent(extent) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    let obj;\r\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\r\n      if (equals(object.extent, extent)) {\r\n        obj = object;\r\n        return true;\r\n      }\r\n    });\r\n    if (obj) {\r\n      loadedExtentsRtree.remove(obj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch remove features from the source.  If you want to remove all features\r\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\r\n   * instead.\r\n   * @param {Array<FeatureType>} features Features to remove.\r\n   * @api\r\n   */\r\n  removeFeatures(features) {\r\n    let removed = false;\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      removed = this.removeFeatureInternal(features[i]) || removed;\r\n    }\r\n    if (removed) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a single feature from the source. If you want to batch remove\r\n   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method\r\n   * instead.\r\n   * @param {FeatureType} feature Feature to remove.\r\n   * @api\r\n   */\r\n  removeFeature(feature) {\r\n    if (!feature) {\r\n      return;\r\n    }\r\n    const removed = this.removeFeatureInternal(feature);\r\n    if (removed) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} True if the feature was removed, false if it was not found.\r\n   * @protected\r\n   */\r\n  removeFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n    if (!(featureKey in this.uidIndex_)) {\r\n      return false;\r\n    }\r\n\r\n    if (featureKey in this.nullGeometryFeatures_) {\r\n      delete this.nullGeometryFeatures_[featureKey];\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.remove(feature);\r\n      }\r\n    }\r\n\r\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\r\n    featureChangeKeys?.forEach(unlistenByKey);\r\n    delete this.featureChangeKeys_[featureKey];\r\n\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const idString = id.toString();\r\n      const indexedFeature = this.idIndex_[idString];\r\n      if (indexedFeature === feature) {\r\n        delete this.idIndex_[idString];\r\n      } else if (Array.isArray(indexedFeature)) {\r\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\r\n        if (indexedFeature.length === 1) {\r\n          this.idIndex_[idString] = indexedFeature[0];\r\n        }\r\n      }\r\n    }\r\n    delete this.uidIndex_[featureKey];\r\n    if (this.hasListener(VectorEventType.REMOVEFEATURE)) {\r\n      this.dispatchEvent(\r\n        new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature),\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove a feature from the id index.  Called internally when the feature id\r\n   * may have changed.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */\r\n  removeFromIdIndex_(feature) {\r\n    for (const id in this.idIndex_) {\r\n      if (this.idIndex_[id] === feature) {\r\n        delete this.idIndex_[id];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the new loader of the source. The next render cycle will use the\r\n   * new loader.\r\n   * @param {import(\"../featureloader.js\").FeatureLoader<FeatureType>} loader The loader to set.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n\r\n  /**\r\n   * Points the source to a new url. The next render cycle will use the new url.\r\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    assert(this.format_, '`format` must be set when `url` is set');\r\n    this.url_ = url;\r\n    this.setLoader(xhr(url, this.format_));\r\n  }\r\n}\r\n\r\nexport default VectorSource;\r\n"],
  "mappings": "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",
  "names": ["RBush", "xhr"]
}
