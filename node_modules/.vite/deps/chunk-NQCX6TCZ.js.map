{
  "version": 3,
  "sources": ["../../ol/style/Icon.js", "../../ol/style/Text.js"],
  "sourcesContent": ["/**\r\n * @module ol/style/Icon\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {assert} from '../asserts.js';\r\nimport {get as getIconImage} from './IconImage.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\r\n * Anchor unit can be either a fraction of the icon size or in pixels.\r\n */\r\n\r\n/**\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\r\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\r\n * Positive values will shift the icon right and up.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {string} [src] Image source URI.\r\n * @property {import(\"./Style.js\").DeclutterMode} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @param {number} width The width.\r\n * @param {number} height The height.\r\n * @param {number|undefined} wantedWidth The wanted width.\r\n * @param {number|undefined} wantedHeight The wanted height.\r\n * @return {number|Array<number>} The scale.\r\n */\r\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\r\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\r\n    return [wantedWidth / width, wantedHeight / height];\r\n  }\r\n  if (wantedWidth !== undefined) {\r\n    return wantedWidth / width;\r\n  }\r\n  if (wantedHeight !== undefined) {\r\n    return wantedHeight / height;\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */\r\nclass Icon extends ImageStyle {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\r\n\r\n    /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    const scale = options.scale !== undefined ? options.scale : 1;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: opacity,\r\n      rotation: rotation,\r\n      scale: scale,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      rotateWithView: rotateWithView,\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.normalizedAnchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.anchorOrigin_ =\r\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorXUnits_ =\r\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorYUnits_ =\r\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    const image = options.img !== undefined ? options.img : null;\r\n\r\n    let cacheKey = options.src;\r\n\r\n    assert(\r\n      !(cacheKey !== undefined && image),\r\n      '`image` and `src` cannot be provided at the same time',\r\n    );\r\n\r\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\r\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\r\n    }\r\n    assert(\r\n      cacheKey !== undefined && cacheKey.length > 0,\r\n      'A defined and non-empty `src` or `image` must be provided',\r\n    );\r\n\r\n    assert(\r\n      !(\r\n        (options.width !== undefined || options.height !== undefined) &&\r\n        options.scale !== undefined\r\n      ),\r\n      '`width` or `height` cannot be provided together with `scale`',\r\n    );\r\n\r\n    let imageState;\r\n    if (options.src !== undefined) {\r\n      imageState = ImageState.IDLE;\r\n    } else if (image !== undefined) {\r\n      if ('complete' in image) {\r\n        if (image.complete) {\r\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\r\n        } else {\r\n          imageState = ImageState.LOADING;\r\n        }\r\n      } else {\r\n        imageState = ImageState.LOADED;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */\r\n    this.iconImage_ = getIconImage(\r\n      image,\r\n      /** @type {string} */ (cacheKey),\r\n      this.crossOrigin_,\r\n      imageState,\r\n      this.color_,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.offsetOrigin_ =\r\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = options.size !== undefined ? options.size : null;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.initialOptions_;\r\n\r\n    /**\r\n     * Calculate the scale if width or height were given.\r\n     */\r\n    if (options.width !== undefined || options.height !== undefined) {\r\n      let width, height;\r\n      if (options.size) {\r\n        [width, height] = options.size;\r\n      } else {\r\n        const image = this.getImage(1);\r\n        if (image.width && image.height) {\r\n          width = image.width;\r\n          height = image.height;\r\n        } else if (image instanceof HTMLImageElement) {\r\n          this.initialOptions_ = options;\r\n          const onload = () => {\r\n            this.unlistenImageChange(onload);\r\n            if (!this.initialOptions_) {\r\n              return;\r\n            }\r\n            const imageSize = this.iconImage_.getSize();\r\n            this.setScale(\r\n              calculateScale(\r\n                imageSize[0],\r\n                imageSize[1],\r\n                options.width,\r\n                options.height,\r\n              ),\r\n            );\r\n          };\r\n          this.listenImageChange(onload);\r\n          return;\r\n        }\r\n      }\r\n      if (width !== undefined) {\r\n        this.setScale(\r\n          calculateScale(width, height, options.width, options.height),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    let scale, width, height;\r\n    if (this.initialOptions_) {\r\n      width = this.initialOptions_.width;\r\n      height = this.initialOptions_.height;\r\n    } else {\r\n      scale = this.getScale();\r\n      scale = Array.isArray(scale) ? scale.slice() : scale;\r\n    }\r\n    return new Icon({\r\n      anchor: this.anchor_.slice(),\r\n      anchorOrigin: this.anchorOrigin_,\r\n      anchorXUnits: this.anchorXUnits_,\r\n      anchorYUnits: this.anchorYUnits_,\r\n      color:\r\n        this.color_ && this.color_.slice\r\n          ? this.color_.slice()\r\n          : this.color_ || undefined,\r\n      crossOrigin: this.crossOrigin_,\r\n      offset: this.offset_.slice(),\r\n      offsetOrigin: this.offsetOrigin_,\r\n      opacity: this.getOpacity(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      rotation: this.getRotation(),\r\n      scale,\r\n      width,\r\n      height,\r\n      size: this.size_ !== null ? this.size_.slice() : undefined,\r\n      src: this.getSrc(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   * @override\r\n   */\r\n  getAnchor() {\r\n    let anchor = this.normalizedAnchor_;\r\n    if (!anchor) {\r\n      anchor = this.anchor_;\r\n      const size = this.getSize();\r\n      if (\r\n        this.anchorXUnits_ == 'fraction' ||\r\n        this.anchorYUnits_ == 'fraction'\r\n      ) {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        anchor = this.anchor_.slice();\r\n        if (this.anchorXUnits_ == 'fraction') {\r\n          anchor[0] *= size[0];\r\n        }\r\n        if (this.anchorYUnits_ == 'fraction') {\r\n          anchor[1] *= size[1];\r\n        }\r\n      }\r\n\r\n      if (this.anchorOrigin_ != 'top-left') {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        if (anchor === this.anchor_) {\r\n          anchor = this.anchor_.slice();\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'top-right' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[0] = -anchor[0] + size[0];\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'bottom-left' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[1] = -anchor[1] + size[1];\r\n        }\r\n      }\r\n      this.normalizedAnchor_ = anchor;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      anchor[0] - displacement[0] / scale[0],\r\n      anchor[1] + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */\r\n  setAnchor(anchor) {\r\n    this.anchor_ = anchor;\r\n    this.normalizedAnchor_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\r\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\r\n   * @api\r\n   * @override\r\n   */\r\n  getImage(pixelRatio) {\r\n    return this.iconImage_.getImage(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} The pixel ratio of the image.\r\n   * @api\r\n   * @override\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return this.iconImage_.getPixelRatio(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @override\r\n   */\r\n  getImageSize() {\r\n    return this.iconImage_.getSize();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   * @override\r\n   */\r\n  getImageState() {\r\n    return this.iconImage_.getImageState();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   * @override\r\n   */\r\n  getHitDetectionImage() {\r\n    return this.iconImage_.getHitDetectionImage();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   * @override\r\n   */\r\n  getOrigin() {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    let offset = this.offset_;\r\n\r\n    if (this.offsetOrigin_ != 'top-left') {\r\n      const size = this.getSize();\r\n      const iconImageSize = this.iconImage_.getSize();\r\n      if (!size || !iconImageSize) {\r\n        return null;\r\n      }\r\n      offset = offset.slice();\r\n      if (\r\n        this.offsetOrigin_ == 'top-right' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\r\n      }\r\n      if (\r\n        this.offsetOrigin_ == 'bottom-left' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\r\n      }\r\n    }\r\n    this.origin_ = offset;\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */\r\n  getSrc() {\r\n    return this.iconImage_.getSrc();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @api\r\n   * @override\r\n   */\r\n  getSize() {\r\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon width (in pixels).\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[0] * scale[0];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[0] * scale[0];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon height (in pixels).\r\n   * @api\r\n   */\r\n  getHeight() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[1] * scale[1];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[1] * scale[1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   * @override\r\n   */\r\n  setScale(scale) {\r\n    delete this.initialOptions_;\r\n    super.setScale(scale);\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  listenImageChange(listener) {\r\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @api\r\n   * @override\r\n   */\r\n  load() {\r\n    this.iconImage_.load();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  unlistenImageChange(listener) {\r\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  ready() {\r\n    return this.iconImage_.ready();\r\n  }\r\n}\r\n\r\nexport default Icon;\r\n", "/**\r\n * @module ol/style/Text\r\n */\r\nimport Fill from './Fill.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\r\n\r\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\r\nconst DEFAULT_FILL_COLOR = '#333';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\r\nclass Text {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.font_ = options.font;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\r\n    this.text_ = options.text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\r\n    this.textAlign_ = options.textAlign;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\r\n    this.justify_ = options.justify;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.repeat_ = options.repeat;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\r\n    this.textBaseline_ = options.textBaseline;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ =\r\n      options.fill !== undefined\r\n        ? options.fill\r\n        : new Fill({color: DEFAULT_FILL_COLOR});\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxAngle_ =\r\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\r\n    this.placement_ =\r\n      options.placement !== undefined ? options.placement : 'point';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overflow_ = !!options.overflow;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.backgroundFill_ = options.backgroundFill\r\n      ? options.backgroundFill\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.backgroundStroke_ = options.backgroundStroke\r\n      ? options.backgroundStroke\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.padding_ = options.padding === undefined ? null : options.padding;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new Text({\r\n      font: this.getFont(),\r\n      placement: this.getPlacement(),\r\n      repeat: this.getRepeat(),\r\n      maxAngle: this.getMaxAngle(),\r\n      overflow: this.getOverflow(),\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      text: this.getText(),\r\n      textAlign: this.getTextAlign(),\r\n      justify: this.getJustify(),\r\n      textBaseline: this.getTextBaseline(),\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      offsetX: this.getOffsetX(),\r\n      offsetY: this.getOffsetY(),\r\n      backgroundFill: this.getBackgroundFill()\r\n        ? this.getBackgroundFill().clone()\r\n        : undefined,\r\n      backgroundStroke: this.getBackgroundStroke()\r\n        ? this.getBackgroundStroke().clone()\r\n        : undefined,\r\n      padding: this.getPadding() || undefined,\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\r\n  getOverflow() {\r\n    return this.overflow_;\r\n  }\r\n\r\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\r\n  getFont() {\r\n    return this.font_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\r\n  getMaxAngle() {\r\n    return this.maxAngle_;\r\n  }\r\n\r\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\r\n  getPlacement() {\r\n    return this.placement_;\r\n  }\r\n\r\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  getRepeat() {\r\n    return this.repeat_;\r\n  }\r\n\r\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\r\n  getOffsetX() {\r\n    return this.offsetX_;\r\n  }\r\n\r\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\r\n  getOffsetY() {\r\n    return this.offsetY_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\r\n  getTextAlign() {\r\n    return this.textAlign_;\r\n  }\r\n\r\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\r\n  getJustify() {\r\n    return this.justify_;\r\n  }\r\n\r\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\r\n  getTextBaseline() {\r\n    return this.textBaseline_;\r\n  }\r\n\r\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getBackgroundFill() {\r\n    return this.backgroundFill_;\r\n  }\r\n\r\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getBackgroundStroke() {\r\n    return this.backgroundStroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\r\n  getPadding() {\r\n    return this.padding_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\r\n  setOverflow(overflow) {\r\n    this.overflow_ = overflow;\r\n  }\r\n\r\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\r\n  setFont(font) {\r\n    this.font_ = font;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\r\n  setMaxAngle(maxAngle) {\r\n    this.maxAngle_ = maxAngle;\r\n  }\r\n\r\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\r\n  setOffsetX(offsetX) {\r\n    this.offsetX_ = offsetX;\r\n  }\r\n\r\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\r\n  setOffsetY(offsetY) {\r\n    this.offsetY_ = offsetY;\r\n  }\r\n\r\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\r\n  setPlacement(placement) {\r\n    this.placement_ = placement;\r\n  }\r\n\r\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  setRepeat(repeat) {\r\n    this.repeat_ = repeat;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\r\n  }\r\n\r\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\r\n  setTextAlign(textAlign) {\r\n    this.textAlign_ = textAlign;\r\n  }\r\n\r\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\r\n  setJustify(justify) {\r\n    this.justify_ = justify;\r\n  }\r\n\r\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\r\n  setTextBaseline(textBaseline) {\r\n    this.textBaseline_ = textBaseline;\r\n  }\r\n\r\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setBackgroundFill(fill) {\r\n    this.backgroundFill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setBackgroundStroke(stroke) {\r\n    this.backgroundStroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\r\n  setPadding(padding) {\r\n    this.padding_ = padding;\r\n  }\r\n}\r\n\r\nexport default Text;\r\n"],
  "mappings": "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",
  "names": ["image"]
}
