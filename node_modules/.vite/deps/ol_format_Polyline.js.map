{
  "version": 3,
  "sources": ["../../ol/format/TextFeature.js", "../../ol/geom/flat/flip.js", "../../ol/format/Polyline.js"],
  "sourcesContent": ["/**\r\n * @module ol/format/TextFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for text feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass TextFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'text';\r\n  }\r\n\r\n  /**\r\n   * Read the feature from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromText(\r\n      getText(source),\r\n      this.adaptOptions(options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the features from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromText(\r\n      getText(source),\r\n      this.adaptOptions(options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the geometry from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromText(\r\n      getText(source),\r\n      this.adaptOptions(options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   * @api\r\n   * @override\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromText(getText(source));\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjectionFromText(text) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeature(feature, options) {\r\n    return this.writeFeatureText(feature, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeatures(features, options) {\r\n    return this.writeFeaturesText(features, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return this.writeGeometryText(geometry, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {string} Text.\r\n */\r\nfunction getText(source) {\r\n  if (typeof source === 'string') {\r\n    return source;\r\n  }\r\n  return '';\r\n}\r\n\r\nexport default TextFeature;\r\n", "/**\r\n * @module ol/geom/flat/flip\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [destOffset] Destination offset.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {\r\n  if (dest !== undefined) {\r\n    dest = dest;\r\n    destOffset = destOffset !== undefined ? destOffset : 0;\r\n  } else {\r\n    dest = [];\r\n    destOffset = 0;\r\n  }\r\n  let j = offset;\r\n  while (j < end) {\r\n    const x = flatCoordinates[j++];\r\n    dest[destOffset++] = flatCoordinates[j++];\r\n    dest[destOffset++] = x;\r\n    for (let k = 2; k < stride; ++k) {\r\n      dest[destOffset++] = flatCoordinates[j++];\r\n    }\r\n  }\r\n  dest.length = destOffset;\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/format/Polyline\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {flipXY} from '../geom/flat/flip.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\r\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\r\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\r\n * feature geometries created by the format reader.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the Encoded\r\n * Polyline Algorithm Format.\r\n *\r\n * When reading features, the coordinates are assumed to be in two dimensions\r\n * and in [latitude, longitude] order.\r\n *\r\n * As Polyline sources contain a single feature,\r\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\r\n * feature in an array.\r\n *\r\n * @api\r\n */\r\nclass Polyline extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.factor_ = options.factor ? options.factor : 1e5;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     */\r\n    this.geometryLayout_ = options.geometryLayout\r\n      ? options.geometryLayout\r\n      : 'XY';\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @override\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const geometry = this.readGeometryFromText(text, options);\r\n    return new Feature(geometry);\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   * @override\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    const feature = this.readFeatureFromText(text, options);\r\n    return [feature];\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @override\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    const stride = getStrideForLayout(this.geometryLayout_);\r\n    const flatCoordinates = decodeDeltas(text, stride, this.factor_);\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    const coordinates = inflateCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n    );\r\n    const lineString = new LineString(coordinates, this.geometryLayout_);\r\n\r\n    return transformGeometryWithOptions(\r\n      lineString,\r\n      false,\r\n      this.adaptOptions(options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   * @override\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, options);\r\n    }\r\n    throw new Error('Expected `feature` to have a geometry');\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   * @override\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return this.writeFeatureText(features[0], options);\r\n  }\r\n\r\n  /**\r\n   * @param {LineString} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   * @override\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    geometry =\r\n      /** @type {LineString} */\r\n      (\r\n        transformGeometryWithOptions(geometry, true, this.adaptOptions(options))\r\n      );\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\r\n  }\r\n}\r\n\r\n/**\r\n * Encode a list of n-dimensional points and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of n-dimensional points.\r\n * @param {number} stride The number of dimension of the points in the list.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeDeltas(numbers, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      const num = numbers[i];\r\n      const delta = num - lastNumbers[d];\r\n      lastNumbers[d] = num;\r\n\r\n      numbers[i] = delta;\r\n    }\r\n  }\r\n\r\n  return encodeFloats(numbers, factor);\r\n}\r\n\r\n/**\r\n * Decode a list of n-dimensional points from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} stride The number of dimension of the points in the\r\n *     encoded string.\r\n * @param {number} [factor] The factor by which the resulting numbers will\r\n *     be divided. Default is `1e5`.\r\n * @return {Array<number>} A list of n-dimensional points.\r\n * @api\r\n */\r\nexport function decodeDeltas(encoded, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  /** @type {Array<number>} */\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  const numbers = decodeFloats(encoded, factor);\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      lastNumbers[d] += numbers[i];\r\n\r\n      numbers[i] = lastNumbers[d];\r\n    }\r\n  }\r\n\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of floating point numbers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of floating point numbers.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeFloats(numbers, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] = Math.round(numbers[i] * factor);\r\n  }\r\n\r\n  return encodeSignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of floating point numbers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} [factor] The factor by which the result will be divided.\r\n *     Default is `1e5`.\r\n * @return {Array<number>} A list of floating point numbers.\r\n * @api\r\n */\r\nexport function decodeFloats(encoded, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  const numbers = decodeSignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] /= factor;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of signed integers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of signed integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeSignedIntegers(numbers) {\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\r\n  }\r\n  return encodeUnsignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of signed integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of signed integers.\r\n */\r\nexport function decodeSignedIntegers(encoded) {\r\n  const numbers = decodeUnsignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of unsigned integers and return an encoded string\r\n *\r\n * @param {Array<number>} numbers A list of unsigned integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedIntegers(numbers) {\r\n  let encoded = '';\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    encoded += encodeUnsignedInteger(numbers[i]);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Decode a list of unsigned integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of unsigned integers.\r\n */\r\nexport function decodeUnsignedIntegers(encoded) {\r\n  const numbers = [];\r\n  let current = 0;\r\n  let shift = 0;\r\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\r\n    const b = encoded.charCodeAt(i) - 63;\r\n    current |= (b & 0x1f) << shift;\r\n    if (b < 0x20) {\r\n      numbers.push(current);\r\n      current = 0;\r\n      shift = 0;\r\n    } else {\r\n      shift += 5;\r\n    }\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode one single unsigned integer and return an encoded string\r\n *\r\n * @param {number} num Unsigned integer that should be encoded.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedInteger(num) {\r\n  let value,\r\n    encoded = '';\r\n  while (num >= 0x20) {\r\n    value = (0x20 | (num & 0x1f)) + 63;\r\n    encoded += String.fromCharCode(value);\r\n    num >>= 5;\r\n  }\r\n  value = num + 63;\r\n  encoded += String.fromCharCode(value);\r\n  return encoded;\r\n}\r\n\r\nexport default Polyline;\r\n"],
  "mappings": "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",
  "names": ["Feature_default"]
}
